#!/usr/bin/env python3
import argparse
import varclust.profiles as profiles
import varclust.distances as dist

# Argument parser -------------------------------------------------------------

parser = argparse.ArgumentParser(epilog='Calculates a distance matrix for the '
                                        'similarity score of all SNV profiles '
                                        'in the input directory.')
parser.add_argument('input_dir',
                    type=str,
                    help='input directory path containing the SNV profiles')
parser.add_argument('output',
                    type=str,
                    help='output distance matrix file path')
parser.add_argument('-s', '--subset_cols',
                    type=str,
                    dest='subset_cols',
                    default=None,
                    metavar='',
                    help='list of column(s) to subset variants on')
parser.add_argument('-S', '--subset_values',
                    type=str,
                    dest='subset_values',
                    default=None,
                    metavar='',
                    help='list of value(s) to subset variants on')
parser.add_argument('-m', '--merge_by',
                    type=str,
                    dest='merge_by',
                    default='gene',
                    metavar='',
                    help='merge variants by unique gene [default] or position')
parser.add_argument('-a', '--similarity_param_a',
                    type=int,
                    dest='similarity_param_a',
                    default=1,
                    metavar='',
                    help='similarity score parameter \"a\"')
parser.add_argument('-b', '--similarity_param_b',
                    type=int,
                    dest='similarity_param_b',
                    default=5,
                    metavar='',
                    help='similarity score parameter \"b\"')
parser.add_argument('-n', '--normalise',
                    action='store_true',
                    dest='normalise',
                    help='normalise final distance matrix')
args = parser.parse_args()

# Analysis --------------------------------------------------------------------

# Check for subsets
if args.subset_cols is not None:
    subset_cols = args.subset_cols.split(',')
    subset_values = args.subset_values.split(',')
else:
    subset_cols = None
    subset_values = None

# Read profiles
profile_list = profiles.read_profile_dir(in_dir=args.input_dir,
                                         merge_by=args.merge_by,
                                         subset_cols=subset_cols,
                                         subset_values=subset_values)

# Calculate distances
distances = dist.create_matrix(profile_list,
                               merge_by=args.merge_by,
                               a=args.similarity_param_a,
                               b=args.similarity_param_b,
                               normalise=args.normalise)

# Save distances to file
distances.to_csv(args.output, sep='\t')
