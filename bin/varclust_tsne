#!/usr/bin/env python3
import argparse
import pandas as pd
import varclust.metadata as meta
import varclust.cluster as cluster

# Argument parser -------------------------------------------------------------

parser = argparse.ArgumentParser(epilog='Clusters and plots a distance matrix '
                                        'using tSNE.')
parser.add_argument('input',
                    type=str,
                    help='input distance matrix file path')
parser.add_argument('output',
                    type=str,
                    help='output image file path')
parser.add_argument('-m', '--metadata-file',
                    type=str,
                    dest='metadata_file',
                    default=None,
                    metavar='',
                    help='metadata file path')
parser.add_argument('-M', '--metadata-id',
                    type=str,
                    dest='metadata_id',
                    default=None,
                    metavar='',
                    help='metadata id column to merge on')
parser.add_argument('-c', '--colour-col',
                    type=str,
                    dest='colour_col',
                    default=None,
                    metavar='',
                    help='grouping column for colours [default: none]')
parser.add_argument('-s', '--shape-col',
                    type=str,
                    dest='shape_col',
                    default=None,
                    metavar='',
                    help='grouping column for shapes [default: none]')
parser.add_argument('-S', '--subset-groups',
                    type=str,
                    dest='subset',
                    default=None,
                    metavar='',
                    help='subset samples [format: col1,set1,set2,;col2,...]')
parser.add_argument('-p', '--perplexity',
                    type=int,
                    dest='perplexity',
                    default=30,
                    metavar='',
                    help='perplexity [default: 30]')
parser.add_argument('-l', '--learning-rate',
                    type=int,
                    dest='learning_rate',
                    default=20,
                    metavar='',
                    help='learning rate [default: 200]')
parser.add_argument('-a', '--alpha',
                    type=float,
                    default=0.75,
                    dest='alpha',
                    metavar='',
                    help='alpha value for points [default: 0.75]')
parser.add_argument('-r', '--remove-na-threshold',
                    type=int,
                    default=5,
                    dest='remove_na_threshold',
                    metavar='',
                    help='remove rows/columns containing NAs >= threshold')
args = parser.parse_args()

# Analysis --------------------------------------------------------------------

# Read distance matrix
distances = pd.read_csv(args.input, sep='\t', index_col=0)

# Remove NAs
distances = meta.remove_na(distances, threshold=args.remove_na_threshold)

# Add metadata (if appliable)
if args.metadata_file is not None:
    distances = meta.add_metadata(distances,
                                  args.metadata_file,
                                  args.metadata_id)

# Subset groups (if applicable)
if args.subset is not None:

    # Loop over subset groups
    for sub_group in args.subset.split(";"):

        # Get column and sets
        sub_col = sub_group.split(',')[0]
        sub_sets = sub_group.split(',')[1:]
        sub_sets = ','.join(sub_sets)

        # Check for numerical subset
        expr_list = ['<', '>', '=']
        if any(substring in sub_sets for substring in expr_list):
            expression = True
        else:
            expression = False

        # Subset groups
        distances = meta.filter_metadata(distances,
                                         filter_col=sub_col,
                                         filter_values=sub_sets,
                                         expression=expression)

# Perform tSNE
clust = cluster.tSNE(distances=distances,
                     learning_rate=args.learning_rate,
                     perplexity=args.perplexity)

# Plot tSNE
plot = cluster.plot_tSNE(tsne=clust,
                         distances=distances,
                         output=args.output,
                         alpha=args.alpha,
                         colour_cols=args.colour_col,
                         shape_cols=args.shape_col)
