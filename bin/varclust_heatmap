#!/usr/bin/env python3
import argparse
import pandas as pd
import varclust.metadata as meta
import varclust.cluster as cluster

# Argument parser -------------------------------------------------------------

parser = argparse.ArgumentParser(epilog='Hierarchically clusters and plots a '
                                        'distance matrix using the '
                                        'chosen method.')
parser.add_argument('input',
                    type=str,
                    help='input distance matrix file path')
parser.add_argument('output',
                    type=str,
                    help='output image file path')
parser.add_argument('-A', '--print-ARI',
                    dest='print_ari',
                    action='store_true',
                    help='also print the ARI to stdout')
parser.add_argument('-n', '--no-plot',
                    dest='no_plot',
                    action='store_true',
                    help='do not plot the heatmap')
parser.add_argument('-c', '--cluster-groups',
                    action='store_true',
                    dest='cluster_groups',
                    help='perform clustering [default: false]')
parser.add_argument('-m', '--metadata-file',
                    type=str,
                    dest='metadata_file',
                    default=None,
                    metavar='',
                    help='metadata file path')
parser.add_argument('-M', '--metadata-id',
                    type=str,
                    dest='metadata_id',
                    default='SRR',
                    metavar='',
                    help='metadata id column to merge on [default: SRR]')
parser.add_argument('-C', '--cluster-output',
                    type=str,
                    dest='cluster_output',
                    default=None,
                    metavar='',
                    help='file path for resulting cluster output')
parser.add_argument('-l', '--linkage-method',
                    type=str,
                    dest='linkage_method',
                    default='ward',
                    metavar='',
                    help='complete, single, average, centroid, '
                         'median, ward [default] or weighted')
parser.add_argument('-g', '--group-cols',
                    type=str,
                    dest='group_cols',
                    default=None,
                    metavar='',
                    help='group columns [format: group1,group2,...]')
parser.add_argument('-s', '--subset-groups',
                    type=str,
                    dest='subset',
                    default=None,
                    metavar='',
                    help='subset samples [format: column,set1,set2,...]')
parser.add_argument('-r', '--remove-na-threshold',
                    type=int,
                    default=5,
                    dest='remove_na_threshold',
                    metavar='',
                    help='remove rows/columns containing NAs >= threshold')
args = parser.parse_args()

# Analysis --------------------------------------------------------------------

# Read distance matrix
distances = pd.read_csv(args.input, sep='\t', index_col=0)

# Remove NAs
distances = meta.remove_na(distances, threshold=args.remove_na_threshold)

# Add metadata (if appliable)
if args.metadata_file is not None:
    distances = meta.add_metadata(distances,
                                  args.metadata_file,
                                  args.metadata_id)

# Subset groups (if applicable)
if args.subset is not None:

    # Loop over subset groups
    for sub_group in args.subset.split(";"):

        # Get column and sets
        sub_col = sub_group.split(',')[0]
        sub_sets = sub_group.split(',')[1:]
        sub_sets = ','.join(sub_sets)

        # Check for numerical subset
        expr_list = ['<', '>', '=']
        if any(substring in sub_sets for substring in expr_list):
            expression = True
        else:
            expression = False

        # Subset groups
        distances = meta.filter_metadata(distances,
                                         filter_col=sub_col,
                                         filter_values=sub_sets,
                                         expression=expression)

# Add groups to index for clustering
distances, k = meta.set_index(distances, args.group_cols)

# Perform hierarchical clustering and plot
cluster.cluster_hierarchical(distances=distances,
                             output=args.output,
                             cluster_groups=args.cluster_groups,
                             cluster_output=args.cluster_output,
                             method=args.linkage_method,
                             print_ari=args.print_ari,
                             no_plot=args.no_plot,
                             k=k)
